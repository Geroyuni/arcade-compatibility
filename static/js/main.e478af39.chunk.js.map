{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Tag","props","state","text","color","this","className","Component","Game","toggleAccordion","setState","active","location_images","location","toLowerCase","data","lastIndex","vendors","Object","keys","map","vendor","index","src","replace","desc","alt","title","tests","test","issues","issue","gpu_vendor","gpu_info","description","fullscreen","windowed","length","msiafterburner_issues","msiafterburner","onClick","name","App","setQuery","value","query","window","history","replaceState","fetch","then","response","json","games","game","misc_searchable","forEach","push","apply","index_id","urlParams","URLSearchParams","search","has","get","filtered_data","gamesList","sort","a","b","filter","eachItem","includes","some","item","game_data","href","type","onChange","e","target","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.e478af39.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport './App.css';\n\nclass Tag extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: props.text\n    }\n  }\n\n  render() {\n    let color = (this.state.text === \"Works\" ? \"blue\" : \"\")\n    return (\n      <span className={\"tag \" + color}>{this.state.text}</span>\n    )\n  }\n}\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      active: false\n    }\n  }\n\n  toggleAccordion = () => {\n    this.setState({ active: !this.state.active })\n  }\n\n  location_images = (location) => {\n    switch (location.toLowerCase()) {\n      case \"steam\":\n        return \"assets/steam.svg\";\n      case \"epic games store\":\n        return \"assets/egs.svg\";\n      default:\n        return \"assets/generic.svg\";\n    }\n  }\n\n  render() {\n    let lastIndex = 0;\n    const vendors = Object.keys(this.state.data.vendors).map((vendor, index) => {\n      let src = `assets/${vendor.toLowerCase()}_${this.state.data.vendors[vendor].replace(\" \", \"_\").toLowerCase()}.svg`\n      let desc = `${vendor} (${this.state.data.vendors[vendor]})`\n\n      return (\n        <img src={src} alt={desc} title={desc} />\n      )\n    })\n\n    const tests = this.state.data.tests.map((test) => {\n      const issues = test.issues.map((issue) => (\n        <span key={lastIndex++} className=\"tag gray\">{issue}</span>\n      ))\n\n      return (\n        <>\n          <div className=\"test_gpu\">\n            <img src={`assets/${test.gpu_vendor.toLowerCase()}.svg`} alt={test.gpu_vendor} />\n            <h4>{`${test.gpu_vendor} ${test.gpu_info}`}</h4>\n          </div>\n          {test.description ? <p>{test.description}</p> : \"\"}\n          <p><span className=\"test_type\">Fullscreen:</span><Tag text={test.fullscreen} /></p>\n          <p><span className=\"test_type\">Windowed:</span><Tag text={test.windowed} /></p>\n          {test.issues.length ? <p><span className=\"test_type\">Issues:</span>{issues}</p> : \"\"}\n        </>\n      )\n    })\n\n    const msiafterburner_issues = this.state.data.msiafterburner.map((issue) => (\n      <span key={lastIndex++} className=\"tag gray\">{issue}</span>\n    ))\n\n    return (\n      <div className={\"game \" + (this.state.active ? \"\" : \"hide_info\")}>\n        <button className=\"game_button\" onClick={() => this.toggleAccordion()}>\n          <div className=\"game_title\">\n            <img src={this.location_images(this.state.data.location)} alt={this.state.data.location} title={this.state.data.location} />\n            <p>{this.state.data.name}</p>\n          </div>\n          <div className=\"game_vendor\">\n            {vendors}\n          </div>\n        </button>\n        <div className=\"game_info\">\n          {this.state.data.msiafterburner.length ? <p>If you use a program called MSIAfterburner, you may also get additional issues: {msiafterburner_issues}</p> : \"\"}\n          {this.state.data.description ? <p>{this.state.data.description}</p> : \"\"}\n          {tests}\n        </div>\n      </div>\n    )\n  };\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      query: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"games.json\").then((response) => response.json()).then((response) => {\n      let lastIndex = 0\n      const games = response.map(game => {\n        game.misc_searchable = []\n        game.vendors = { \"NVIDIA\": \"Not tested\", \"AMD\": \"Not tested\", \"Intel\": \"Not tested\" }\n\n        game.tests.forEach((test) => {\n          game.misc_searchable.push(`${test.gpu_vendor} ${test.gpu_info}`)\n\n          if (test.fullscreen !== \"Works\" || test.windowed !== \"Works\" || test.issues.length) {\n            if (game.vendors[test.gpu_vendor] !== \"Issues\")\n              game.vendors[test.gpu_vendor] = \"Issues\"\n\n            if (test.fullscreen !== \"Works\")\n              game.misc_searchable.push(test.fullscreen)\n            if (test.windowed !== \"Works\")\n              game.misc_searchable.push(test.windowed)\n            if (test.issues.length)\n              game.misc_searchable.push.apply(game.misc_searchable, test.issues)\n          }\n          else {\n            if (game.vendors[test.gpu_vendor] === \"Not tested\")\n              game.vendors[test.gpu_vendor] = \"Works\"\n          }\n        });\n\n        game.index_id = lastIndex++;\n        return game;\n      })\n\n      let urlParams = new URLSearchParams(window.location.search)\n\n      this.setState({ data: games, query: (urlParams.has(\"search\") ? urlParams.get(\"search\") : \"\") })\n    })\n  }\n\n  setQuery = (value) => {\n    this.setState({ query: value });\n    // window.history.replaceState(\"\", \"\", (value ? `/?search=${value}` : \"/\"));\n    window.history.replaceState(\"\", \"\", (value ? `/arcade-compatibility/?search=${value}` : \"/arcade-compatibility/\"));\n  }\n\n  render() {\n    let filtered_data = this.state.data\n    filtered_data = filtered_data.sort((a, b) => {\n      return ((a.name.toLowerCase() < b.name.toLowerCase()) ? -1 : 1)\n    }).filter(eachItem => {\n      let query = this.state.query.toLowerCase()\n      return (\n        eachItem.name.toLowerCase().includes(query) ||\n        eachItem.location.toLowerCase().includes(query) ||\n        eachItem.misc_searchable.some((item) => (item.toLowerCase().includes(query))) ||\n        eachItem.msiafterburner.some((item) => (item.toLowerCase().includes(query))) ||\n        (eachItem.msiafterburner.length ? \"msiafterburner\".includes(query) : false) ||\n        (eachItem.vendors[\"NVIDIA\"] === \"Not tested\" ? false : `NVIDIA (${eachItem.vendors[\"NVIDIA\"]})`.toLowerCase().includes(query)) ||\n        (eachItem.vendors[\"AMD\"] === \"Not tested\" ? false : `AMD (${eachItem.vendors[\"AMD\"]})`.toLowerCase().includes(query)) ||\n        (eachItem.vendors[\"Intel\"] === \"Not tested\" ? false : `Intel (${eachItem.vendors[\"Intel\"]})`.toLowerCase().includes(query))\n      );\n    });\n\n    const gamesList = filtered_data.map((game_data) => (\n      <Game key={game_data.index_id} data={game_data} />));\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Arcade Compatibility</h1>\n          <p>\n            These are tests done by the community to check whether a game works or not on Parsec Arcade Beta.\n            Compatibility will vary depending on your hardware, and it's possible that you won't be able to\n            host a game that is said to work\n            here. <a href=\"https://support.parsec.app/hc/en-us/articles/115003036632\">Use the Computers tab</a> for\n            games that don't work.\n          </p>\n          <input type=\"text\" onChange={(e) => this.setQuery(e.target.value)} placeholder=\"Search games, stores, GPUs or status...\" value={this.state.query} />\n        </header>\n        <main>\n          {gamesList}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}