{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Tag","props","state","text","color","this","className","Component","Game","toggleAccordion","setState","active","images","location","data","console","log","lastIndex","tests","map","test","issues","issue","gpu_vendor","gpu_info","fullscreen","windowed","length","onClick","src","alt","width","name","tweak","status","App","setQuery","value","query","fetch","then","response","json","games","game","forEach","index_id","filtered_data","gamesList","sort","a","b","toLowerCase","filter","eachItem","includes","game_data","type","onChange","e","target","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.6a3f113a.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport './App.css';\n\nclass Tag extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: props.text\n    }\n  }\n\n  render() {\n    let color = this.state.text === \"Works\" ? \"blue\" : \"\"\n    return (\n      <span className={\"tag \" + color}>{this.state.text}</span>\n    )\n  }\n}\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      active: false\n    }\n  }\n\n  toggleAccordion = () => {\n    this.setState({ active: !this.state.active })\n  }\n\n  images = (location) => {\n    switch (location) {\n      case \"Steam\":\n        return \"assets/steam.svg\";\n      case \"Epic Games Store\":\n        return \"assets/egs.svg\";\n      default:\n        return \"assets/generic.svg\";\n    }\n  }\n\n  render() {\n    console.log(this.state.data.data)\n    let lastIndex = 0;\n    const tests = this.state.data.tests.map((test) => {\n      const issues = test.issues.map((issue) => (\n        <span key={lastIndex++} className=\"tag gray\">{issue}</span>\n      ))\n\n      return (\n        <>\n          <div className=\"spacing\" />\n          <h4><b>{test.gpu_vendor}</b> {test.gpu_info}</h4>\n          <p>Fullscreen:<Tag text={test.fullscreen} /></p>\n          <p>Windowed:<Tag text={test.windowed} /></p>\n          {test.issues.length ? <p>Issues:{issues}</p> : \"\"}\n        </>\n      )\n    });\n\n    return (\n      <div className={\"game \" + (this.state.active ? \"\" : \"hide_info\")}>\n        <div className=\"game_select\" onClick={() => this.toggleAccordion()}>\n          <div className=\"game_name\">\n            <img src={this.images(this.state.data.location)} alt={this.state.data.location} width=\"16px\" />\n            <p>{this.state.data.name}</p>\n          </div>\n          <div className=\"game_status\">\n            {this.state.data.tweak ? <Tag text=\"Requires tweaks\" /> : \"\"}\n            <Tag text={this.state.data.status} />\n\n          </div>\n        </div>\n        <div className=\"game_info\">\n          {this.state.data.tweak ? <><p>{this.state.data.tweak}</p><div className=\"spacing\" /></> : \"\"}\n          {tests}\n        </div>\n      </div>\n    )\n  };\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      query: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"games.json\").then((response) => response.json()).then((response) => {\n      let lastIndex = 0\n      const games = response.map(game => {\n        game.status = \"Works\";\n        game.tests.forEach((test) => {\n          if (test.fullscreen !== \"Works\" || test.windowed !== \"Works\" || test.issues.length) {\n            game.status = \"Has issues\";\n            return;\n          }\n        });\n        game.index_id = lastIndex++;\n        return game;\n      })\n      this.setState({ data: games })\n    })\n  }\n\n  setQuery = (value) => {\n    this.setState({ query: value })\n  }\n\n  render() {\n    let filtered_data = this.state.data\n    filtered_data = filtered_data.sort((a, b) => {\n      return ((a.name.toLowerCase() < b.name.toLowerCase()) ? -1 : 1)\n    }).filter(eachItem => {\n      return (\n        eachItem.location.toLowerCase().includes(this.state.query.toLowerCase()) ||\n        eachItem.name.toLowerCase().includes(this.state.query.toLowerCase()) ||\n        eachItem.status.toLowerCase().includes(this.state.query.toLowerCase()) ||\n        (eachItem.tweak ? \"requires tweaks\".includes(this.state.query.toLowerCase()) : false)\n      );\n    });\n\n    const gamesList = filtered_data.map((game_data) => (\n      <Game key={game_data.index_id} data={game_data} />));\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Arcade Compatibility</h1>\n          <p>\n            These are tests done by the community to check whether a game works or not on Arcade.\n            Note that compatibility will vary depending on your hardware, and it's possible that\n            you won't be able to host a game that is said to work here.\n          </p>\n          <input type=\"text\" onChange={(e) => this.setQuery(e.target.value)} placeholder=\"Search for a game or tag...\" />\n        </header>\n        <main>\n          {gamesList}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}